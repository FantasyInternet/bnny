include "./leb128.wast"

~ BnNY ~ A WebAssembly assembler written in Poetry

var error
var src
var pos
var line
var column
var sections

func reset
  rewind
  error = null
  sections =
    :type =
      :count = 0
      :bin = binary

func rewind
  pos = 0
  line = 0
  column = 0

func assemble wast
  reset
  src = wast
  var tokens = array
  var token = read_token
  while token
    array_push tokens token
    token = read_token
  if error
    return null
  else
    return json_encode tokens

func croak message
  error = message + " at line " + line + ", column " + column + "!"

func is_eof
  return pos >= (size_of src)

func read_char
  var char = ""+binary_slice src pos 1
  pos++
  column++
  if char == "\n"
    line++
    column = 0
  return char

func peek_char
  return ""+binary_slice src pos 1

func read_token
  var token = ""+binary_string 0
  var char = peek_char
  ~ skip whitespace
  while (char_code char) <= 0x20 && false == is_eof
    read_char
    char = peek_char
  if char == "("
    token = read_char
  elsif char == ")"
    token = read_char
  else
    while (char_code char) > 32 && false == is_eof
      binary_write token (size_of token) char
      pos++
      char = peek_char
  return token
